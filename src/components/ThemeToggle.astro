---
// Theme Toggle Component
---
<button
  id="theme-toggle"
  type="button"
  aria-label="Theme wechseln"
  class="rounded-lg p-2 text-gray-400 transition hover:bg-white/10 hover:text-white focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-400"
>
  <svg id="theme-icon-dark" class="hidden h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
    <path stroke-linecap="round" stroke-linejoin="round" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
  </svg>
  <svg id="theme-icon-light" class="hidden h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
    <path stroke-linecap="round" stroke-linejoin="round" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
  </svg>
</button>

<script>
  const STORAGE_KEY = 'theme';
  const DARK = 'dark';
  const LIGHT = 'light';

  function setTheme(theme) {
    const root = document.documentElement;
    const isDark = theme === DARK;

    // Remove all theme classes
    root.classList.remove(DARK, LIGHT);
    root.classList.add(theme);
    
    // Also set data-theme attribute for better CSS targeting
    root.setAttribute('data-theme', theme);

    const darkIcon = document.getElementById('theme-icon-dark');
    const lightIcon = document.getElementById('theme-icon-light');

    if (darkIcon && lightIcon) {
      if (isDark) {
        darkIcon.classList.remove('hidden');
        lightIcon.classList.add('hidden');
      } else {
        darkIcon.classList.add('hidden');
        lightIcon.classList.remove('hidden');
      }
    }

    localStorage.setItem(STORAGE_KEY, theme);
  }

  function initTheme() {
    const savedTheme = localStorage.getItem(STORAGE_KEY);
    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
    const theme = savedTheme || (prefersDark ? DARK : LIGHT);
    setTheme(theme);
  }

  function toggleTheme() {
    const root = document.documentElement;
    const currentTheme = root.classList.contains(DARK) ? DARK : LIGHT;
    const newTheme = currentTheme === DARK ? LIGHT : DARK;
    setTheme(newTheme);
  }

  function setupToggleButton() {
    const button = document.getElementById('theme-toggle');
    if (!button) {
      return;
    }

    // Avoid registering multiple listeners when Astro swaps pages
    button.removeEventListener('click', toggleTheme);
    button.addEventListener('click', toggleTheme);
  }

  function onReady() {
    initTheme();
    setupToggleButton();
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', onReady, { once: true });
  } else {
    onReady();
  }

  // Re-init after Astro page transitions (if using View Transitions)
  document.addEventListener('astro:after-swap', () => {
    onReady();
  });
</script>
